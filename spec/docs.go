// Code generated by swaggo/swag. DO NOT EDIT
package spec

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/add_binary": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "operationId": "add-binary",
                "parameters": [
                    {
                        "description": "Add Binary",
                        "name": "AddBinaryRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AddBinaryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SuccessResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.BadRequestResult"
                        }
                    }
                }
            }
        },
        "/contains_duplicate": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "operationId": "contains-duplicate",
                "parameters": [
                    {
                        "description": "Contains Duplicate",
                        "name": "ContainsDuplicateRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ContainsDuplicateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SuccessResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.BadRequestResult"
                        }
                    }
                }
            }
        },
        "/is_palindrome": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "operationId": "is-palindrome",
                "parameters": [
                    {
                        "description": "Is Palindrome",
                        "name": "IsPalindromeRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.IsPalindromeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SuccessResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.BadRequestResult"
                        }
                    }
                }
            }
        },
        "/is_power_of_two": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "operationId": "is-power-of-two",
                "parameters": [
                    {
                        "description": "Is Power of Two",
                        "name": "IsPowerOfTwoRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.IsPowerOfTwoRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SuccessResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.BadRequestResult"
                        }
                    }
                }
            }
        },
        "/roman_to_int": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "operationId": "roman-to-int",
                "parameters": [
                    {
                        "description": "Roman to Int",
                        "name": "RomanToIntRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RomanToIntRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SuccessResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.BadRequestResult"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.AddBinaryRequest": {
            "type": "object",
            "required": [
                "a",
                "b"
            ],
            "properties": {
                "a": {
                    "type": "string",
                    "example": "1101"
                },
                "b": {
                    "type": "string",
                    "example": "11"
                }
            }
        },
        "model.BadRequestResult": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "status": {
                    "type": "string",
                    "example": "BAD REQUEST"
                }
            }
        },
        "model.ContainsDuplicateRequest": {
            "type": "object",
            "required": [
                "a"
            ],
            "properties": {
                "a": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        1,
                        2,
                        3,
                        1
                    ]
                }
            }
        },
        "model.IsPalindromeRequest": {
            "type": "object",
            "required": [
                "a"
            ],
            "properties": {
                "a": {
                    "type": "string",
                    "example": "A man, a plan, a canal: Panama"
                }
            }
        },
        "model.IsPowerOfTwoRequest": {
            "type": "object",
            "required": [
                "a"
            ],
            "properties": {
                "a": {
                    "type": "integer",
                    "example": 12
                }
            }
        },
        "model.RomanToIntRequest": {
            "type": "object",
            "required": [
                "a"
            ],
            "properties": {
                "a": {
                    "type": "string",
                    "example": "III"
                }
            }
        },
        "model.SuccessResult": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {},
                "status": {
                    "type": "string",
                    "example": "Ok"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Digiutilsapi Specification",
	Description:      "The purpose of this application is to provide an API for handy tools to solve trivial daily life problems.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
